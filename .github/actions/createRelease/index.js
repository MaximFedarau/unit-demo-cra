const core = require('@actions/core');
const github = require('@actions/github');
const exec = require('@actions/exec');

const main = async () => {
    try {
        const token = core.getInput("token", {required: true});
        const owner = core.getInput("owner", {required: true});
        const repo = core.getInput("repo", {required: true});

        const ref = core.getInput("ref", {required: true});
        const tag_name = ref.split("/")[2];

        const actor = core.getInput("actor", {required: true});
        
        // —Å–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
        const octokit = github.getOctokit(token);
        const {data: releaseData} = await octokit.rest.repos.createRelease({
            owner, 
            repo,
            tag_name,
            generate_release_notes: true,
        });

        // —Å–æ–∑–¥–∞–µ–º changelog –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–≥–∞–º–∏
        let tagsOutput = "";
        const options = {};
        options.listeners = {
            stdout: (data) => {
                tagsOutput += data.toString();
            },
        };
        await exec.exec('git', ['tag'] , options);
        let tags = tagsOutput.split("\n").filter((tag) => tag.trim() !== "");

        // –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–≥–∞–º–∏
        let commitsOutput = "";
        const commitsOptions = {};
        commitsOptions.listeners = {
            stdout: (data) => {
                commitsOutput += data.toString();
            },
        };
        if (tags.length === 1) {
            await exec.exec('git', ['log', "--pretty=oneline"] , commitsOptions);
        } else {
            const secondTagName = tags[tags.indexOf(tag_name) - 1].trim();
            // –º–æ–∂–µ–º –∏–¥—Ç–∏ –æ—Ç HEAD —Ç–∞–∫ –∫–∞–∫ 1) –≤ —Å–ª—É—á–∞–µ push-a –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞ - –∫–æ–º–º–∏—Ç —Å –Ω–æ–≤—ã–º —Ç–µ–≥–æ–º –∏ –±—É–¥–µ—Ç HEAD 2) –≤ —Å–ª—É—á–∞–µ –≤–µ—Ç–∫–∏ release/* - HEAD –º–æ–∂–µ—Ç —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å hotfixes
            await exec.exec('git', ['log', "--pretty=oneline", `HEAD...${secondTagName}`] , commitsOptions);
        }

        // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        let commitsBetween = commitsOutput.split("\n").filter((commit) => commit.trim() !== "");
        const commitsCategories = {"feat" : [], "fix": [], "Merge pull request": []}, commitsTitles = {"feat": "üöÄ –ß—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ?", fix: "‚öôÔ∏è –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ?", "Merge pull request": "üï∏ –ö–∞–∫–∏–µ –±—ã–ª–∏ PR?"}, others = [];
        let fullChangelog = "";
        commitsBetween.forEach((commit, index) => {
            commit = commit.trim();
            const firstSpaceIndex = commit.indexOf(" ");
            const sha = commit.substring(0, firstSpaceIndex).trim(), text =  commit.substring(firstSpaceIndex + 1).trim();
            
            let hasCategory = false;
            Object.keys(commitsCategories).forEach((category) => {
                if (text.startsWith(category)) {
                    commitsCategories[category].push({sha, text});
                    hasCategory = true;
                }
            })
            if (!hasCategory) others.push({sha, text})
            fullChangelog += `${commitsBetween.length - index}. <a href="https://github.com/${owner}/${repo}/commit/${sha}">${text}</a><br/>`
        })

        // —Ñ–æ—Ä–º–∏—Ä—É–µ–º issue body
        let issueBody = `## –ö—Ç–æ –∞–≤—Ç–æ—Ä?
@${actor}
        
## –ö–æ–≥–¥–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–µ–ª–∏–∑?
${releaseData.created_at}
        
## –ö–∞–∫–∞—è –≤–µ—Ä—Å–∏—è —É —Ä–µ–ª–∏–∑–∞?
${tag_name}
`

        Object.keys(commitsCategories).forEach((category) => {
            if (commitsCategories[category].length > 0) {
                issueBody += `## ${commitsTitles[category]}\n`
                commitsCategories[category].forEach(({sha, text}) => {
                    issueBody += `- ${text} - [commit link](https://github.com/${owner}/${repo}/commit/${sha})\n`
                })
            }
        })
        if (others.length > 0) {
            issueBody += `## üåà –û—Å—Ç–∞–ª—å–Ω–æ–µ\n`
            others.forEach(({sha, text}) => {
                issueBody += `- ${text} - [commit link](https://github.com/${owner}/${repo}/commit/${sha})\n`
            })
        }
        if (fullChangelog.length > 0) {
            issueBody += `<details>
<summary>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π</summary>
${fullChangelog}
</details>`
        }

        // —Å–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
        await octokit.rest.issues.create({
            owner,
            repo,
            title: `RELEASE - ${tag_name}`,
            labels: ["RELEASE"],
            body: issueBody,
        })
    } catch (error) {
        core.setFailed(error.message);
    }
}

main();